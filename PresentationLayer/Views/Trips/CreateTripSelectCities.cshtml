@model BusinessLayer.Trip;
@using BusinessLayer;

@{
    ViewData["Title"] = "Select Cities";
    string selectedCountryAlphaCode = Model.FirstCountryAlphaCode?? "Unknown";
    string selectedCountry = ViewBag.SelectedCountry as string;
    var countries = ViewBag.Countries as List<string>;
    int countriesIndex = 0;
}

<head>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css" />
    <link rel="stylesheet" href="~/css/site.css" />
    <style>

    </style>
</head>
<h1>Create Trip - Explore @selectedCountry</h1>
<h5>Holiday to @selectedCountry</h5>
<hr />
<a asp-action="Create">Back to Your Trips</a>

<div class="row mt-4">
    <!-- LEFT SIDE -->
    <div class="col-md-7">
       
            <!-- Add place -->
            <div class="form-group mb-3">
                <a asp-controller="Places" asp-action="CreateFromTrip" asp-route-tripName="@Model.Title" asp-route-countryIndex="@countriesIndex" class="btn btn-outline-primary w-100">
                    Add place
                </a>
            </div>
        

        <!-- Select next country -->
        <form id="addCountryForm" asp-controller="Trips" asp-action="AddCountryToTrip" method="post">
            <input type="hidden" name="title" value="@Model.Title" />

            <div class="form-group mb-3 d-flex align-items-end">
                <div class="w-100">
                    <label for="nextCountry"><strong>Select next country</strong></label>
                    <select class="form-control" id="nextCountry" name="nextCountry">
                        <option value="">-- Select a country --</option>
                        @foreach (var country in ViewBag.Countries as List<string>)
                        {
                            <option value="@country">@country</option>
                        }
                    </select>
                </div>
                <button type="submit" class="btn btn-outline-primary ms-2" style="height: 38px;">Add</button>
            </div>
        </form>

        <div class="form-group mt-4">
            <button class="btn btn-success w-100">Generate trip</button>
        </div>
    </div>

    <!-- RIGHT SIDE: Timeline -->
    <div class="col-md-5 bg-light">
        <div class="p-3">
            <h4>Your Trip Timeline</h4>
            <div class="timeline">
                    @foreach (var country in Model.Countries)
                    {
                        <div class="timeline-step">
                            <span class="dot"></span>
                            <span class="step-title">
                                <strong>@country.Name</strong>
                            </span>

                            @if (Model.Places != null && Model.Places.Any())
                            {
                                <ul class="ms-4">
                                    @foreach (var place in Model.Places)
                                    {
                                        if (place.CoutryAlphaCode == country.AlphaCode)
                                        {
                                            <li class="text-danger">📍 @place.Name</li>
                                        }
                                    }
                                </ul>
                            }
                            else
                            {
                                <div class="ms-4 text-secondary"><em>No places added yet</em></div>
                            }
                        </div>
                    }
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", async function () {
            const selectedCountry = @selectedCountry; // or from Model
            const map = L.map('cityMap').setView([20, 0], 2);
            let route = [];
            let polyline = null;

            // Add tile layer
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: 'Map data © OpenStreetMap contributors'
            }).addTo(map);

            // Get GeoJSON borders and zoom to country
            const geoData = await fetch('/Trips/GetCountries').then(res => res.json());
            const countryLayer = L.geoJSON(geoData, {
                style: { color: "#000", weight: 1, fillOpacity: 0.3 },
                onEachFeature: (feature, layer) => {
                    if (feature.properties.name === selectedCountry) {
                        layer.setStyle({ color: "blue", weight: 3, fillOpacity: 0.5 });
                        map.fitBounds(layer.getBounds());
                        // Restrict max zoom-out
                        map.setMaxBounds(layer.getBounds());
                    }
                }
            }).addTo(map);

            // City search using GeoNames
            const searchBox = document.getElementById('citySearchBox');
            const suggestions = document.getElementById('citySuggestions');
            const timeline = document.getElementById("timeline");

            searchBox.addEventListener('input', async function () {
                const query = this.value.trim();
                if (!query) return suggestions.innerHTML = '';

                const countryCode = getCountryCode(selectedCountry); // Implement ISO code mapping
                const username = 'demo'; // 🔁 Replace with your GeoNames username
                const url = `https://secure.geonames.org/searchJSON?q=${query}&maxRows=10&featureClass=P&country=${countryCode}&username=${username}`;

                try {
                    const res = await fetch(url);
                    const data = await res.json();

                    suggestions.innerHTML = '';
                    data.geonames.forEach(city => {
                        const li = document.createElement('li');
                        li.textContent = city.name;
                        li.classList.add('dropdown-item');
                        li.addEventListener('click', () => {
                            searchBox.value = city.name;
                            suggestions.innerHTML = '';
                            const latlng = [city.lat, city.lng];
                            addCity(city.name, latlng);
                        });
                        suggestions.appendChild(li);
                    });
                } catch (err) {
                    console.error('GeoNames error:', err);
                }
            });

            document.addEventListener('click', function (e) {
                if (!searchBox.contains(e.target) && !suggestions.contains(e.target)) {
                    suggestions.innerHTML = '';
                }
            });

            map.on('click', function (e) {
                const latlng = [e.latlng.lat, e.latlng.lng];
                const label = `Lat: ${latlng[0].toFixed(2)}, Lng: ${latlng[1].toFixed(2)}`;
                addCity(label, latlng);
            });

            function addCity(label, latlng) {
                L.marker(latlng).addTo(map).bindPopup(label).openPopup();
                route.push(latlng);
                updatePolyline();
                updateTimeline(label);
            }

            function updatePolyline() {
                if (polyline) map.removeLayer(polyline);
                polyline = L.polyline(route, {
                    color: 'blue',
                    weight: 4,
                    opacity: 0.6
                }).addTo(map);
            }

            function updateTimeline(label) {
                const step = document.createElement('div');
                step.className = 'timeline-step city';
                step.innerHTML = `<span class="dot"></span><span class="step-title">City: <strong>${label}</strong></span>`;
                timeline.appendChild(step);
            }

            // Map country names to ISO codes
            function getCountryCode(name) {
                const codes = {
                    'Italy': 'IT',
                    'France': 'FR',
                    'Germany': 'DE',
                    'Canada': 'CA',
                    'Spain': 'ES',
                    // add more as needed
                };
                return codes[name] || '';
            }
                 
            // 🌍 Country dropdown functionality
            document.getElementById("countryDropdown").addEventListener("click", function () {
                const list = document.getElementById("countryList");
                list.style.display = list.style.display === "none" ? "block" : "none";
            });

            document.querySelectorAll(".country-option").forEach(function (item) {
                item.addEventListener("click", function () {
                    const countryName = this.textContent;
                    document.getElementById("countryDropdown").textContent = countryName;
                    document.getElementById("selectedCountryInput").value = countryName;
                    document.getElementById("countryList").style.display = "none";
                });
            });

            // Close dropdown on outside click
            document.addEventListener("click", function (event) {
                const dropdown = document.getElementById("countryDropdown");
                const list = document.getElementById("countryList");
                if (!dropdown.contains(event.target) && !list.contains(event.target)) {
                    list.style.display = "none";
                }
            });
        });
    </script>
}


